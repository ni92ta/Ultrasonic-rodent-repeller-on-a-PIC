

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun May 26 20:09:14 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	12F510
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=ENTRY,delta=2
     5                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=ENTRY,delta=2
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0xA,6
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 29/04/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC12F510 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59                           
    60                           	psect	idataBANK0
    61  02A                     __pidataBANK0:
    62                           
    63                           ;initializer for _y
    64  02A  0801               	retlw	1
    65  02B  0800               	retlw	0
    66                           
    67                           ;initializer for _clock2
    68  02C  0809               	retlw	9
    69  02D  0800               	retlw	0
    70  0001                     _TMR0	set	1
    71  0006                     _TRISGPIO	set	6
    72  0006                     _GPIO	set	6
    73                           
    74                           	psect	cinit
    75  002                     start_initialization:	
    76                           ; #config settings
    77                           
    78  002                     __initialization:
    79                           
    80                           ; Initialize objects allocated to BANK0
    81  002  04A3  092A  04A3   	fcall	__pidataBANK0	;fetch initializer
    82  005  003A               	movwf	__pdataBANK0& (0+31)
    83  006  04A3  092B  04A3   	fcall	__pidataBANK0+1	;fetch initializer
    84  009  003B               	movwf	(__pdataBANK0+1)& (0+31)
    85  00A  04A3  092C  04A3   	fcall	__pidataBANK0+2	;fetch initializer
    86  00D  003C               	movwf	(__pdataBANK0+2)& (0+31)
    87  00E  04A3  092D  04A3   	fcall	__pidataBANK0+3	;fetch initializer
    88  011  003D               	movwf	(__pdataBANK0+3)& (0+31)
    89                           
    90                           ; Clear objects allocated to BANK0
    91  012  0C10               	movlw	__pbssBANK0
    92  013  0024               	movwf	4
    93  014  0C1A               	movlw	(__pbssBANK0+10)& (0+255)
    94  015  04A3  0921  04A3   	fcall	clear_ram0
    95                           
    96                           ; Clear objects allocated to BANK1
    97  018  0C30               	movlw	__pbssBANK1
    98  019  0024               	movwf	4
    99  01A  0C34               	movlw	(__pbssBANK1+4)& (0+255)
   100  01B  04A3  0921  04A3   	fcall	clear_ram0
   101  01E                     end_of_initialization:	
   102                           ;End of C runtime variable initialization code
   103                           
   104  01E                     __end_of__initialization:
   105  01E  0064               	clrf	4
   106  01F  04A3  0BB6         	ljmp	_main	;jump to C main() function
   107                           
   108                           	psect	bssBANK0
   109  010                     __pbssBANK0:
   110  010                     _clock_out:
   111  010                     	ds	2
   112  012                     _t:
   113  012                     	ds	2
   114  014                     _x:
   115  014                     	ds	2
   116  016                     _clock3:
   117  016                     	ds	2
   118  018                     _clock:
   119  018                     	ds	2
   120                           
   121                           	psect	dataBANK0
   122  01A                     __pdataBANK0:
   123  01A                     _y:
   124  01A                     	ds	2
   125  01C                     _clock2:
   126  01C                     	ds	2
   127                           
   128                           	psect	bssBANK1
   129  030                     __pbssBANK1:
   130  030                     _clock_out_2:
   131  030                     	ds	2
   132  032                     _p:
   133  032                     	ds	2
   134                           
   135                           	psect	clrtext
   136  021                     clear_ram0:	
   137                           ;	Called with FSR containing the base address, and
   138                           ;	W with the last address+1
   139                           
   140  021  0004               	clrwdt	;clear the watchdog before getting into this loop
   141  022                     clrloop0:
   142  022  0060               	clrf	0	;clear RAM location pointed to by FSR
   143  023  02A4               	incf	4,f	;increment pointer
   144  024  0184               	xorwf	4,w	;XOR with final address
   145  025  0E1F               	andlw	31	;Test low bits only
   146  026  0643               	btfsc	3,2	;have we reached the end yet?
   147  027  0800               	retlw	0	;all done for this memory range, return
   148  028  0184               	xorwf	4,w	;XOR again to restore value
   149  029  0A22               	goto	clrloop0	;do the next byte
   150                           
   151                           	psect	cstackBANK0
   152  01E                     __pcstackBANK0:
   153  01E                     ?_main:
   154  01E                     ??_main:	
   155                           ; 1 bytes @ 0x0
   156                           
   157                           
   158                           ; 1 bytes @ 0x0
   159  01E                     	ds	1
   160                           
   161                           	psect	maintext
   162  1B6                     __pmaintext:	
   163 ;;
   164 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   165 ;;
   166 ;; *************** function _main *****************
   167 ;; Defined at:
   168 ;;		line 38 in file "newmain.c"
   169 ;; Parameters:    Size  Location     Type
   170 ;;		None
   171 ;; Auto vars:     Size  Location     Type
   172 ;;		None
   173 ;; Return value:  Size  Location     Type
   174 ;;                  1   36[None  ] void 
   175 ;; Registers used:
   176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+1
   177 ;; Tracked objects:
   178 ;;		On entry : B00/0
   179 ;;		On exit  : 0/0
   180 ;;		Unchanged: 0/0
   181 ;; Data sizes:     COMMON   BANK0   BANK1
   182 ;;      Params:         0       0       0
   183 ;;      Locals:         0       0       0
   184 ;;      Temps:          0       1       0
   185 ;;      Totals:         0       1       0
   186 ;;Total ram usage:        1 bytes
   187 ;; This function calls:
   188 ;;		Nothing
   189 ;; This function is called by:
   190 ;;		Startup code after reset
   191 ;; This function uses a non-reentrant model
   192 ;;
   193                           
   194                           
   195                           ;psect for function _main
   196  1B6                     _main:
   197  1B6                     l589:	
   198                           ;incstack = 0
   199                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+1]
   200                           
   201                           
   202                           ;newmain.c: 39:    GPIO = 0b00000000;
   203  1B6  04A4               	bcf	4,5	;FSR5=0, select bank0
   204  1B7  0066               	clrf	6	;volatile
   205  1B8                     l591:
   206                           
   207                           ;newmain.c: 40:    TRISGPIO = 0b00000000;
   208  1B8  0C00               	movlw	0
   209  1B9  0006               	tris	6
   210  1BA                     l593:
   211                           
   212                           ;newmain.c: 41:    TMR0 = 0;
   213  1BA  0061               	clrf	1	;volatile
   214  1BB                     l595:
   215                           
   216                           ;newmain.c: 110:         if (clock_out == 0){
   217  1BB  0210               	movf	_clock_out,w
   218  1BC  0111               	iorwf	_clock_out+1,w
   219  1BD  0743               	btfss	3,2
   220  1BE  0BC0               	goto	u51
   221  1BF  0BC1               	goto	u50
   222  1C0                     u51:
   223  1C0  0BBB               	goto	l595
   224  1C1                     u50:
   225  1C1                     l597:
   226                           
   227                           ;newmain.c: 111:            x ++;
   228  1C1  0C01               	movlw	1
   229  1C2  002A               	movwf	btemp
   230  1C3  006B               	clrf	btemp+1
   231  1C4  020A               	movf	wtemp0,w
   232  1C5  01F4               	addwf	_x,f
   233  1C6  0603               	skipnc
   234  1C7  02B5               	incf	_x+1,f
   235  1C8  020B               	movf	wtemp0+1,w
   236  1C9  01F5               	addwf	_x+1,f
   237  1CA                     l599:
   238                           
   239                           ;newmain.c: 112:  if (x >= 65000){
   240  1CA  0CFD               	movlw	253
   241  1CB  0095               	subwf	_x+1,w
   242  1CC  0CE8               	movlw	232
   243  1CD  0643               	skipnz
   244  1CE  0094               	subwf	_x,w
   245  1CF  0703               	skipc
   246  1D0  0BD2               	goto	u61
   247  1D1  0BD3               	goto	u60
   248  1D2                     u61:
   249  1D2  0BDE               	goto	l605
   250  1D3                     u60:
   251  1D3                     l601:
   252                           
   253                           ;newmain.c: 113:      t++;
   254  1D3  0C01               	movlw	1
   255  1D4  002A               	movwf	btemp
   256  1D5  006B               	clrf	btemp+1
   257  1D6  020A               	movf	wtemp0,w
   258  1D7  01F2               	addwf	_t,f
   259  1D8  0603               	skipnc
   260  1D9  02B3               	incf	_t+1,f
   261  1DA  020B               	movf	wtemp0+1,w
   262  1DB  01F3               	addwf	_t+1,f
   263  1DC                     l603:
   264                           
   265                           ;newmain.c: 114:      x = 0;
   266  1DC  0074               	clrf	_x
   267  1DD  0075               	clrf	_x+1
   268  1DE                     l605:
   269                           
   270                           ;newmain.c: 118:       GPIO = 0b00100000;
   271  1DE  0C20               	movlw	32
   272  1DF  0026               	movwf	6	;volatile
   273  1E0                     l607:
   274                           
   275                           ;newmain.c: 119:           GPIO = 0b00010000;
   276  1E0  0C10               	movlw	16
   277  1E1  0026               	movwf	6	;volatile
   278  1E2                     l609:
   279                           
   280                           ;newmain.c: 120:            _delay((unsigned long)((10)*(8000000/4000000.0)));
   281  1E2  0C06               	movlw	6
   282  1E3  04A4               	bcf	4,5	;FSR5=0, select bank0
   283  1E4  003E               	movwf	??_main
   284  1E5                     u87:
   285  1E5  02FE               	decfsz	??_main,f
   286  1E6  0BE5               	goto	u87
   287  1E7                     l611:
   288                           
   289                           ;newmain.c: 121:            GPIO = 0b00100000;
   290  1E7  0C20               	movlw	32
   291  1E8  04A4               	bcf	4,5	;FSR5=0, select bank0
   292  1E9  0026               	movwf	6	;volatile
   293  1EA                     l613:
   294                           
   295                           ;newmain.c: 124:                    if (t >= 50){
   296  1EA  0C00               	movlw	0
   297  1EB  0093               	subwf	_t+1,w
   298  1EC  0C32               	movlw	50
   299  1ED  0643               	skipnz
   300  1EE  0092               	subwf	_t,w
   301  1EF  0703               	skipc
   302  1F0  0BF2               	goto	u71
   303  1F1  0BF3               	goto	u70
   304  1F2                     u71:
   305  1F2  0BBB               	goto	l595
   306  1F3                     u70:
   307  1F3                     l615:
   308                           
   309                           ;newmain.c: 125:     y = 0;
   310  1F3  007A               	clrf	_y
   311  1F4  007B               	clrf	_y+1
   312                           
   313                           ;newmain.c: 126:     x = 0;
   314  1F5  0074               	clrf	_x
   315  1F6  0075               	clrf	_x+1
   316  1F7                     l617:
   317                           
   318                           ;newmain.c: 127:     clock_out = 10;
   319  1F7  0C0A               	movlw	10
   320  1F8  0030               	movwf	_clock_out
   321  1F9  0C00               	movlw	0
   322  1FA  0031               	movwf	_clock_out+1
   323  1FB                     l619:
   324                           
   325                           ;newmain.c: 128:    t = 0;
   326  1FB  0072               	clrf	_t
   327  1FC  0073               	clrf	_t+1
   328  1FD  0BBB               	goto	l595
   329  1FE  04A3  0A00         	ljmp	start
   330  200                     __end_of_main:
   331  000A                     btemp	set	10	;btemp
   332  000A                     wtemp0	set	10
   333  000C                     wtemp1	set	12
   334  000E                     wtemp2	set	14
   335  000A                     ttemp0	set	10
   336  000D                     ttemp1	set	13
   337  000A                     ltemp0	set	10
   338  000C                     ltemp3	set	12
   339                           
   340                           	psect	config
   341                           
   342                           ;Config register CONFIG @ 0xFFF
   343                           ;	Oscillator Select
   344                           ;	OSC = IntRC, INTOSC with 1.125 ms DRT
   345                           ;	Watchdog Timer Enable bit
   346                           ;	WDT = OFF, WDT disabled
   347                           ;	Code Protect
   348                           ;	CP = OFF, Code protection off
   349                           ;	Master Clear Enable bit
   350                           ;	MCLRE = ON, GP3/MCLR Functions as MCLR
   351                           ;	Internal Oscillator Frequency Select bit
   352                           ;	IOSCFS = ON, 8 MHz INTOSC Speed
   353  0FFF                     	org	4095
   354  0FFF  0FFA               	dw	4090

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            16      1      15
    BANK1            16      0       4

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            10      0       0       3        0.0%
BANK0               10      1       F       4       93.8%
BITBANK1            10      0       0       5        0.0%
BANK1               10      0       4       6       25.0%
ABS                  0      0      13       7        0.0%
DATA                 0      0      13       8        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun May 26 20:09:14 2024

                      _p 0032                        _t 0012                        _x 0014  
                      _y 001A                       u50 01C1                       u51 01C0  
                     u60 01D3                       u61 01D2                       u70 01F3  
                     u71 01F2                       u87 01E5                       fsr 0004  
                    l601 01D3                      l611 01E7                      l603 01DC  
                    l613 01EA                      l605 01DE                      l615 01F3  
                    l607 01E0                      l617 01F7                      l609 01E2  
                    l619 01FB                      l591 01B8                      l593 01BA  
                    l595 01BB                      l597 01C1                      l589 01B6  
                    l599 01CA                      indf 0000                     _GPIO 0006  
                   _TMR0 0001                     _main 01B6                     btemp 000A  
                   start 0000                    ?_main 001E                    _clock 0018  
                  ltemp0 000A                    ltemp3 000C                    ttemp0 000A  
                  ttemp1 000D                    status 0003                    wtemp0 000A  
                  wtemp1 000C                    wtemp2 000E          __initialization 0002  
           __end_of_main 0200                   ??_main 001E                   _clock2 001C  
                 _clock3 0016  __end_of__initialization 001E             __pidataBANK0 002A  
             __pbssBANK0 0010               __pbssBANK1 0030               __pmaintext 01B6  
                clrloop0 0022     end_of_initialization 001E      start_initialization 0002  
            __pdataBANK0 001A                ___latbits 0001            __pcstackBANK0 001E  
              _clock_out 0010              _clock_out_2 0030                clear_ram0 0021  
               _TRISGPIO 0006            __size_of_main 004A  
